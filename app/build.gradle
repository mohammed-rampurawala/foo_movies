apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: '../quality/findbugs.gradle'


android {
    signingConfigs {
        config
    }
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.foo.movies"
        minSdkVersion 17
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'API_KEY', "$rootProject.moviesDBApiKey"
        buildConfigField 'String', 'BASE_URL', "$rootProject.baseUrl"
        buildConfigField 'String', 'DB_NAME', '"movies_db"'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
}


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

if (keystorePropertiesFile.exists()) {

    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    if (keystoreProperties != null &&
            keystoreProperties.containsKey('storeFile') &&
            keystoreProperties.containsKey('storePassword') &&
            keystoreProperties.containsKey('keyAlias') &&
            keystoreProperties.containsKey('keyPassword')) {

        println 'keystore.properties found. Sign APK'
        android.signingConfigs.config.storeFile file(keystoreProperties['storeFile'])
        android.signingConfigs.config.storePassword keystoreProperties['storePassword']
        android.signingConfigs.config.keyAlias keystoreProperties['keyAlias']
        android.signingConfigs.config.keyPassword keystoreProperties['keyPassword']

    } else {
        println 'keystore.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'keystore.properties not found'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$rootProject.libraryVersion"
    implementation "com.android.support:design:$rootProject.libraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.libraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.libraryVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.interceptorVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.httpClientVersion"

    // JSON Parsing
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.gsonConverterVersion"

    // RxJava support for Room
    implementation 'android.arch.persistence.room:runtime:1.1.0-alpha1'
    implementation 'android.arch.persistence.room:rxjava2:1.1.0-alpha1'
    annotationProcessor "android.arch.persistence.room:compiler:1.1.0-alpha1"
    implementation "com.miguelcatalan:materialsearchview:$rootProject.searchViewVersion"

    //Butterknife
    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"

    //Image
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    // logger
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    //Dependency Injection
    implementation "com.google.dagger:dagger:$rootProject.dagger2Version"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.dagger2Version"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'

    //Reactive dependency
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjava2Version"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroidVersion"

    //Crashlytics dependency
    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
    compile "com.google.firebase:firebase-core:$rootProject.firebaseCoreVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
}
apply plugin: 'com.google.gms.google-services'